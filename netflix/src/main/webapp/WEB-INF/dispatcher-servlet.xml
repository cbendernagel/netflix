<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd" 
       >

    <context:component-scan base-package="Controllers"/>
    
    <bean id="HandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
    
    <mvc:resources mapping="/resources/**" location="/resources/css" />
    <mvc:annotation-driven />
    <mvc:view-controller path="/" view-name="index"/>
    
    

    <bean id="authenticationService" class="Services.AuthenticationService"/>
    <bean id="agencyService" class="Services.AgencyService"/>
    <bean id="searchService" class="Services.SearchService"/>
    <bean id="locationService" class="Services.LocationService"/>
    <bean id="movieService" class="Services.MovieService">
        <property name="movieDAO" ref="movieDAO"></property>
    </bean>
    <bean id="crewMemberService" class="Services.CrewMemberService">
        <property name="crewMemberDAO" ref="crewMemberDAO"></property>
    </bean>
    <bean id="userService" class="Services.UserService">
        <property name="userDAO" ref="userDAO"></property>
    </bean>
    <bean id="theatreService" class="Services.TheatreService">
        <property name="theatreDAO" ref="theatreDAO"></property>
    </bean>
    <bean id="showingService" class="Services.ShowingService">
        <property name="showingDAO" ref="showingDAO"></property>
    </bean>
    <bean id="theatreRoomService" class="Services.TheatreRoomService">
        <property name="theatreRoomDAO" ref="theatreRoomDAO"></property>
    </bean>
    <bean id="crewMemberMovieService" class="Services.CrewMemberMovieService">
        <property name="crewMemberMovieDAO" ref="crewMemberMovieDAO"></property>
    </bean>
    <bean id="MovieTrailerService" class="Services.MovieTrailerService">
        <property name="movieTrailerDAO" ref="movieTrailerDAO"></property>
    </bean>
    <bean id="userDAO" class="Dao.UserDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="movieDAO" class="Dao.MovieDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="crewMemberDAO" class="Dao.CrewMemberDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="crewMemberMovieDAO" class="Dao.CrewMemberMovieDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="movieTrailerDAO" class="Dao.MovieTrailerDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="theatreDAO" class="Dao.TheatreDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="showingDAO" class="Dao.ShowingDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
     <bean id="theatreRoomDAO" class="Dao.TheatreRoomDAO">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </bean>
    
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/jsp/"
        p:suffix=".jsp" />
    
    
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" ></property>
		<property name="url"
			value="jdbc:mysql://localhost/netflix" ></property>
		<property name="hibernate.connection.username" value="root"></property> 
		<property></property>
                <property name="hibernate.connection.password" value="root123"></property>
    </bean>
    
    <bean id="hibernate4AnnotatedSessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
        p:packagesToScan="Model">
        <property name="dataSource" ref="dataSource" ></property>
        <property name="annotatedClasses">
            <list>
                    <value>Model.User</value>
                    <value>Model.Movie</value>
                    <value>Model.Advertisement</value>
                    <value>Model.Agency</value>
                    <value>Model.CrewMember</value>
                    <value>Model.CrewMemberMovie</value>
                    <value>Model.Genre</value>
                    <value>Model.Review</value>
                    <value>Model.Theatre</value>
                    <value>Model.TheatreRoom</value>
                    <value>Model.MovieTrailer</value>

            </list>
        </property>
        <property name="hibernateProperties">
                <props>
                        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                        <prop key="hibernate.hbm2ddl.auto">update</prop>
                        <prop key="hibernate.show_sql">true</prop>
                </props>
        </property>
    <!-- Another way of indicating that we want to update the schema; Spring 
            calls this _after_ the session factory is created, while the hbm2ddl flag 
            above is processed by Hibernate _during_ creationo f the session factory. 
            <property name="schemaUpdate" value="true" /> -->
    </bean>    

    
    
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"></property>
    </bean>
    
<!--    <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/>

    
    Most controllers will use the ControllerClassNameHandlerMapping above, but
    for the index controller we are using ParameterizableViewController, so we must
    define an explicit mapping for it.
    
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                <prop key="index.htm">indexController</prop>
            </props>
        </property>
    </bean>

    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/jsp/"
          p:suffix=".jsp" />

    
    The index controller.
    
    <bean name="indexController" class="org.springframework.web.servlet.mvc.ParameterizableViewController" p:viewName="index" />-->

</beans>
